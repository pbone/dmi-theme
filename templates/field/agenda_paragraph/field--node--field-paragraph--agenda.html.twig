{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - content_attributes: HTML attributes for the content.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 * @see template_preprocess_field()
 */
#}
{% set field_name_class = field_name|clean_class %}
{%
  set classes = [
  'field',
  'field-' ~ entity_type|clean_class ~ '--' ~ field_name_class,
  'field-name-' ~ field_name_class,
  'field-type-' ~ field_type|clean_class,
  'field-label-' ~ label_display,
  label_display == 'inline' ? 'clearfix',
]
%}
{%
  set title_classes = [
  'field-label',
  label_display == 'visually_hidden' ? 'visually-hidden',
]
%}
<div{{ attributes.addClass(classes) }}>
  {% if not label_hidden %}
    <div{{ title_attributes.addClass(title_classes) }}>{{ label }}</div>
  {% endif %}
  <ul{{ content_attributes.addClass('field-items', 'timeline') }}>
    {% for item in items %}
      <li{{ item.attributes.addClass('field-item', 'timeline-event') }}>
        {% if loop.index == 1 %}
          <svg class="arrow" width="17" height="15" viewBox="0 0 17 15" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
            <title>
              down arrow
            </title>
            <defs>
              <path id="a" d="M8.5 19.7333333L0 5h17l-4.5930086 7.961215z"/>
            </defs>
            <g transform="translate(0 -5)" fill="none" fill-rule="evenodd">
              <use fill="#F7CFFF" xlink:href="#a"/>
              <path stroke="#912BA7" stroke-width="2" d="M8.5 17.7322225L15.2685899 6H1.73141008L8.5 17.7322225z"/>
            </g>
          </svg>
        {% endif %}
        {% if loop.last %}
          <svg class="arrow" width="17" height="15" viewBox="0 0 17 15" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
            <defs>
              <path id="a" d="M8.5 18.7333333L0 4h17z"/>
            </defs>
            <g transform="matrix(1 0 0 -1 0 18.733334)" fill="none" fill-rule="evenodd">
              <use fill="#F7CFFF" xlink:href="#a"/>
              <path stroke="#912BA7" stroke-width="2" d="M8.5 16.7322225L15.2685899 5H1.73141008L8.5 16.7322225z"/>
            </g>
          </svg>
        {% endif %}
        {{ item.content }}

      </li>
    {% endfor %}
  </ul>
</div>
