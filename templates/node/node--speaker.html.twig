{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: Full node entity.
 *   - id: The node ID.
 *   - bundle: The type of the node, for example, "page" or "article".
 *   - authorid: The user ID of the node author.
 *   - createdtime: Time the node was published formatted in Unix timestamp.
 *   - changedtime: Time the node was changed formatted in Unix timestamp.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}

{% if presentation %}
  {% set variantClass = 'm-speaker m-speaker--presentation' %}
{% else %}
  {% set variantClass = 'm-speaker' %}
{% endif %}

<article id="node-{{ node.id }}" {{ attributes.addClass(variantClass) }}>

  {# layout for presenters is different than speakers... #}
  {% if presentation %}

    <div class="m-speaker-intro">
      <p>{{ "Presented by"|trans }}</p>
    </div>

    <div class="m-speaker-image">
      {{ content.field_image }}
    </div>

    <div class="m-speaker-info">
      <div class="m-speaker-name">{{ label }}</div>
      <div class="m-speaker-title">
        <span>{{ node.field_job_title.value }}</span>{% if node.field_company.value is not empty %}, {{ content.field_company }}{% endif %}
      </div>
    </div>

    {% if node.field_logo.value is not empty %}
      <div class="m-speaker-logo">
        {{ content.field_logo }}
      </div>
    {% endif %}

  {% else %}

    <div class="m-speaker-image">
      {{ content.field_image }}
    </div>

    <div class="m-speaker-right">

      <div class="m-speaker-row">
        <div class="m-speaker-info">
          <div class="m-speaker-name">{{ label }}</div>
          <div class="m-speaker-title">
            {{ node.field_job_title.value }}{% if node.field_company.value is not empty %},
              {{ content.field_company }}
            {% endif %}
          </div>
        </div>

        {% if node.field_logo.value is not empty %}
          <div class="m-speaker-logo">
            {{ content.field_logo }}
          </div>
        {% endif %}
      </div>

      <div class="m-speaker-row">
        <div class="m-speaker-bio">{{ content.field_bio }}</div>
      </div>
    </div>

    {#<div class="columns small-2">#}
      {#{{ content.field_image }}#}
    {#</div>#}

    {#<div class="columns small-10">#}
      {#<div class="row">#}
        {#<div class="columns">#}
          {#<p class="m-card-title">{{ content.title }}</p>#}
          {#<div class="speaker-job">#}
            {#{{ node.field_job_title.value }}{% if node.field_company.value is not empty %}, {{ content.field_company }}{% endif %}#}
          {#</div>#}
        {#</div>#}

        {#{% if node.field_logo.value is not empty %}#}
          {#<div class="columns small-8">#}
            {#{{ content.field_logo }}#}
          {#</div>#}
        {#{% endif %}#}
      {#</div>#}

      {#<div class="row">#}
        {#{{ content.field_bio }}#}
      {#</div>#}
    {#</div>#}

  {% endif %}

</article>

