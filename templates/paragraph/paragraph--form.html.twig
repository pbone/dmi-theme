{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
]
%}
{% block paragraph %}
    {% if content.field_fuller_width[0] %}
        <div {#{ attributes.addClass(classes) } #} class="row align-center">
        {% else %}

            <div{{attributes.addClass(classes)}}>

            {% endif %}
            {% block content %}


                {% if (paragraph.field_fuller_width.value == "stacked") and  (content.field_wysiwyg[0]) %}
                    <div class="columns small-12 medium-9 align-center stacked">

                        {{ content.field_title }}

                        <div class="align-center">
                            {{ content.field_wysiwyg }}

                            {{ content.field_contact_forms }}
                        </div>
                    </div>


                {% elseif content.field_wysiwyg[0] %}
                    <div class="columns medium-7">
                        <div class="m-box-icon">
                            {{ get_svg('i-form-arrow') }}
                        </div>
                        <div class="m-box m-box--event">
                            <div class="m-box-inner">
                                {{ content.field_title }}
                                <div class="u-text-size--large">
                                    {{ content.field_wysiwyg }}
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="columns small-12 medium-5 align-top ">
                        <div class="align-center">
                            {{ content.field_contact_forms }}
                        </div>
                    </div>


                {% elseif content.field_fuller_width[0] %}
                    <div class="columns small-12 medium-9 align-center">
                        {{ content.field_title }}

                        <div class="align-center">

                            {{ content.field_contact_forms }}
                        </div>
                    </div>

                {% else %}
                    {{ content }}
                {% endif %}


            {% endblock %}
        </div>
    {% endblock paragraph %}
