{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
set classes = [
'paragraph',
'paragraph--type--' ~ paragraph.bundle|clean_class,
view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
'm-section',
'l-section',
'm-section--padding-top-' ~ content.field_top_padding[0]['#plain_text']|clean_class,
'm-section--padding-bottom-' ~ content.field_bottom_padding[0]['#plain_text']|clean_class,
content.field_bottom_separator ? 'm-section--sep-btm',
    content.field_page_section_off_canvas[0]['#plain_text']|clean_class,
    content.field_section_background_image ? 'm-section-w-bg',
    content.field_section_title_rule[0]['#plain_text']|clean_class
]
%}


{% set animateStyle = content.field_animation_style[0] %}

{% if animateStyle %}
 {{ attach_library('infobuilders/aos') }}
{% endif %}

{% set sectionWidth = content.field_section_width[0] %}


{{ page_section_columns }}
{% block paragraph %}
     {% if content.field_page_section_off_canvas[0]['#plain_text'] is not empty %}
    <span class="return-me"></span>
{% endif %}
  <section{{ attributes.addClass(classes, canvas_classes) }} {% if animateStyle %} data-aos="{{ animateStyle }}"{%
      endif %}>
    {{ content.field_icon }}

      {% if sectionWidth %}
      <div class="row {{ sectionWidth }}">
          {% else %}
          <div class="row">

          {% endif %}


      <div class="columns small-12">

          {% if content.field_section_background_image[0] is not empty %}
              <div class="m-feature-bg" style="background-image:url({{ file_url(content.field_section_background_image['#items'].entity.uri.value)}}">

              </div>
          <div class="m-feature-content">
          {% endif %}


          {% block content %}
          {{ content|without('field_animation_style','field_icon', 'field_top_padding', 'field_bottom_padding',
              'field_bottom_separator', 'field_text_alignment', 'field_page_section_off_canvas', 'field_section_background_image', 'field_section_title_rule', 'field_section_width') }}
        {% endblock %}

              {% if content.field_section_background_image[0] is not empty %}
                    </div>
              {% endif %}
      </div>
    </div>
  </section>


{% endblock paragraph %}
